<?php
/**
 * Created By: Oli Griffiths
 * Date: 11/12/2012
 * Time: 11:55
 */
namespace Oligriffiths\Component\Validation;

use Nooku\Library;

class FilterSet extends Library\ObjectArray
{
    /**
     * Stores errors, keyed by name of filter chain
     *
     * @var array
     */
    protected $_errors = array();

    /**
     * Constructor
     *
     * @param Library\ObjectConfig|null $config  An optional Library\ObjectConfig object with configuration options
     * @return $this
     */
    public function __construct(Library\ObjectConfig $config = null)
    {
        parent::__construct($config);

        $this->addFilters($config->filters->toArray());
    }

    /**
     * Initializes the options for the object
     *
     * Called from {@link __construct()} as a first step of object instantiation.
     *
     * @param   Library\ObjectConfig $object An optional ObjectConfig object with configuration options
     * @return  void
     */
    protected function _initialize(Library\ObjectConfig $config)
    {
        $config->append(array(
            'filters' => array()
        ));

        //Ensure data is removed, all filters must be added via APIs
        $config->remove('data');

        parent::_initialize($config);
    }

    /***
     * Adds filters by key to the set
     *
     * @param array $filters
     * @return $this
     */
    public function addFilters(array $filters)
    {
        foreach($filters AS $name => $filter) {

            //If filter is an array, we have multiple
            if(is_array($filter)){

                $filters = $filter;
                foreach($filters AS $key => $filter){
                    $params = array();

                    //If filter is an array, it's the params, the filter name is the key
                    if(is_array($filter)){
                        $params = $filter;
                        $filter = $key;
                    }

                    $this->addFilter($name, $filter, $params);
                }
            }else{
                $this->addFilter($name, $filter);
            }
        }

        return $this;
    }

    /**
     * Adds a validator to the stack
     *
     * @param $key
     * @param $filter
     * @return $this
     */
    public function addFilter($key, $filter, $params = array())
    {
        //If a chain doesn't exist for the key, create one
        if(!$this->offsetExists($key)){
            $chain = $this->getObject('com://oligriffiths/validation.filter.chain');
            $this->offsetSet($key, $chain);
        }else{
            $chain = $this->offsetGet($key);
        }

        //Add the filter to the chain
        if($filter instanceof Library\FilterInterface) {
            $chain->addFilter($filter);
            if(!$filter->getConfig()->message_target) $filter->getConfig()->message_target = $key;
        }else{
            if(!isset($params['message_target'])) $params['message_target'] = $key;
            $chain->addFilters(array($filter => $params));
        }

        return $this;
    }

    /**
     * Removes a filter from a specific key
     *
     * @param $key
     * @param $filter
     * @return $this
     */
    public function removeFilter($key, $filter)
    {
        if(!$this->offsetExists($key)) return;

        $chain = $this->offsetGet($key);
        $chain->removeFilter($filter);

        //If no filters left, remove the chain
        if(!$chain->count()) $this->offsetUnset($key);

        return $this;
    }

    /**
     * Sets a new chain for a key ($offset)
     *
     * @param string $offset
     * @param Library\FilterChain $chain
     */
    public function offsetSet($offset, $chain)
    {
        if(!$chain instanceof Library\FilterChain){
            throw new \InvalidArgumentException('FilterSet only accepts setting FilterChain instances, given: '.(is_scalar($chain ? $chain : gettype($chain))));
        }

        parent::offsetSet($offset, $chain);
    }

    /**
     * Validates a keyed array against the stored constraint sets
     *
     * @param $data
     * @return bool True on valid, false on failure
     */
    public function validate(array $data)
    {
        $this->_errors = array();
        $valid = true;

        foreach($data AS $key => $value) {

            if($filter = $this->offsetGet($key)) {

                if(!$filter->validate($value)){
                    $valid = false;
                    $this->_errors[$key] = $filter->getErrors();
                }
            }
        }

        return $valid;
    }

    /**
     * Returns any errors generated by the validate method above
     * @return array
     */
    public function getErrors()
    {
        return $this->_errors;
    }
}