<?php

namespace Oligriffiths\Component\Validation;

use Nooku\Library;


class DecoratorValidator extends Library\ObjectDecorator
{
    protected $_errors = array();

    /**
     * Performs validation, throws exception on error
     *
     * @param $value
     * @return mixed
     * @throws \RuntimeException
     */
    public function validate($value)
    {
        //Reset errors
        $this->_errors = array();

        //Perform validation and catch any errors generated. Add an error if validation returned false
        try{
            $success = $this->getDelegate()->validate($value);
            if(!$success) $this->addError($this->getDelegate()->getMessage($value));

        }catch(\Exception $e){
            $success = false;
            $this->addError($e->getMessage());
        }

        return $success;
    }


    /**
     * Adds an error to the error stack
     *
     * @param $error
     */
    protected function addError($error)
    {
        $this->_errors[] = $error;
    }

    /**
     * Returns the errors generated by the validation
     *
     * @return array
     */
    public function getErrors()
    {
        $errors = $this->getDelegate()->getErrors();
        return array_merge($errors, $this->_errors);
    }

    /**
     * Set the decorated object
     *
     * @param  ObjectInterface $delegate The object to decorate
     * @return ObjectDecorator
     * @throws \InvalidArgumentException If the delegate does not extend from Object
     */
    public function setDelegate($delegate)
    {
        //Unwrap the iterator filter so that arrays are validated as-is
        if($delegate instanceof Library\FilterIterator) $delegate = $delegate->getDelegate();

        //Skip the parent setDelegate as it throws an error if $delegate is no an instance of Library\Object
        return Library\ObjectDecoratorAbstract::setDelegate($delegate);
    }
}