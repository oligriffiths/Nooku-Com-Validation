<?php
/**
 * User: Oli Griffiths
 * Date: 07/10/2012
 * Time: 14:38
 */

class ComValidationValidatorSet extends KObjectSet
{
	protected $_errors = array();

	/**
	 * Constructor
	 *
	 * @param KConfig|null $config  An optional KConfig object with configuration options
	 * @return \KObjectSet
	 */
	public function __construct(KConfig $config = null)
	{
		parent::__construct($config);

		if($config->constraints) $this->addConstraints(KConfig::unbox($config->constraints));
	}


	/***
	 * Adds constraint sets by key to the set
	 * @param $constraints
	 */
	public function addConstraints($constraints)
	{
		foreach($constraints AS $column => $constraintset)
		{
			if(is_array($constraintset)){
				$constraintset = $this->getService('com://site/validation.constraint.set', array('constraints' => $constraints));
			}

			if($constraintset instanceof ComValidationConstraintSet)
			{
				$this->setConstraints($column, $constraintset);
			}
		}
	}


	/**
	 * Returns the constraint set for a particular column
	 *
	 * @param string $column
	 * @return ComValidationConstraintSet|null
	 */
	public function getConstraints($column)
	{
		if($this->_object_set->offsetExists($column)){
			return $this->_object_set->offsetGet($column);
		}

		return null;
	}


	/**
	 * Sets the constraint set against a particular column
	 *
	 * @param string $column
	 * @param ComValidationConstraintSet $constraints
	 * @return ComValidationValidatorSet
	 */
	public function setConstraints($column, ComValidationConstraintSet $constraints)
	{
		$this->_object_set->offsetSet($column, $constraints);
		return $this;
	}


	/**
	 * Validates a keyed array against the stored constraint sets
	 *
	 * @param $data
	 * @return bool True on valid, false on failure
	 */
	public function validate($data)
	{
		$errors = array();
		foreach($data AS $key => $value)
		{
			if($constraints = $this->getConstraints($key))
			{
				if(!$constraints->validate($value)){
					$errors[$key] = $constraints->getErrors();
				}
			}
		}

		$this->_errors = $errors;
		return count($errors) ? false : true;
	}


	/**
	 * Returns any errors generated by the validate method above
	 * @return array
	 */
	public function getErrors()
	{
		return $this->_errors;
	}
}